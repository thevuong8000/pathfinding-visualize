{"version":3,"sources":["logo.svg","StateProvider.js","reducer.js","AlgorithmButton.js","Header.js","Node.js","Algorithm/Pathfinder.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","speed","algoList","initCost","algorithm","algoCost","JSON","parse","stringify","visualizing","buildingWalls","actionTypes","state","action","type","newVisitCost","idx","cost","newPathCost","build","AlgorithmButton","title","onClick","isChosen","className","Header","dispatch","setAlgorithm","algo","href","document","getElementById","click","id","Node","row","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","isVisited","isPath","isNote","wallToggle","extraClassName","concat","onContextMenu","e","preventDefault","onAnimationStart","stopPropagation","onMouseLeave","onDragStart","dx","dy","outRange","grid","length","getAllNode","nodes","forEach","node","push","manhattan","nodeA","nodeB","Math","abs","Board","useState","START_ROW","setStartRow","START_COL","setStartCol","FINISH_ROW","setFinishRow","FINISH_COL","setFinishCol","setGrid","mouseDown","setMouseDown","setStart","setSetStart","setFinish","setSetFinish","setVisualizing","lastWall","createNode","distance","Infinity","previousNode","nodeLink","includes","useEffect","currentRow","getInitGrid","countIncr","indexOf","animateShortestPath","nodesInShortestPathOrder","i","setTimeout","runButtonToggle","clearBoard","delWall","getElementsByClassName","newGrid","map","rowIdx","key","nodeIdx","console","log","handleMouseDown","handleMouseEnter","visitedNodesInOrder","animate","startX","startY","visitOrder","queue","a","shift","x","y","nextX","nextY","bfs","stack","pop","dfs","unvisitedNodes","sort","b","dijkstra","finishX","finishY","target","getHeuristics","ha","hb","Astar","path","curNode","unshift","getShortestPath","App","speedText","setSpeedText","FormControl","Select","labelId","onChange","event","newSpeed","MenuItem","end","duration","useEasing","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.94dbaced.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { createContext, useContext, useReducer } from 'react'\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({reducer, initialState, children}) => (\r\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);","export const speed = [600, 50, 5];\r\nexport const algoList = ['bfs', 'dfs', 'dijkstra', 'a-star'];\r\n\r\nconst initCost = [ ['TBD', 'TBD'], \r\n                    ['TBD', 'TBD'],\r\n                    ['TBD', 'TBD'],\r\n                    ['TBD', 'TBD'] ]\r\n\r\nexport const initialState = {\r\n    speed: speed[2],\r\n    algorithm: 'bfs',\r\n    algoCost: JSON.parse(JSON.stringify(initCost)),\r\n    visualizing: false,\r\n    buildingWalls: false,\r\n};\r\n\r\nexport const actionTypes = {\r\n    SET_ALGO: \"SET_ALGO\",\r\n    SET_SPEED: \"SET_SPEED\",\r\n    SET_VISIT_COST: \"SET_VISIT_COST\",\r\n    SET_PATH_COST: \"SET_PATH_COST\",\r\n    RESET_COST: \"RESET_COST\",\r\n    VISUALIZE: \"VISUALIZE\",\r\n    WALL_BUILDING: \"WALL_BUILDING\",\r\n}\r\n\r\nconst reducer = (state, action) => {\r\n    switch(action.type){\r\n        case actionTypes.SET_SPEED:\r\n            return {\r\n                ...state,\r\n                speed: action.speed,\r\n            };\r\n\r\n        case actionTypes.SET_ALGO:\r\n            return {\r\n                ...state,\r\n                algorithm: action.algorithm,\r\n            }\r\n\r\n        case actionTypes.SET_VISIT_COST: \r\n            const newVisitCost = [...state.algoCost];\r\n            newVisitCost[action.idx][0] = action.cost;\r\n            return {\r\n                ...state,\r\n                algoCost: newVisitCost,\r\n            }\r\n\r\n        case actionTypes.SET_PATH_COST:\r\n            const newPathCost = [...state.algoCost];\r\n            newPathCost[action.idx][1] = action.cost;\r\n            return {\r\n                ...state,\r\n                algoCost: newPathCost,\r\n            }    \r\n\r\n        case actionTypes.RESET_COST:\r\n            return{\r\n                ...state,\r\n                algoCost: JSON.parse(JSON.stringify(initCost)),\r\n            }\r\n\r\n        case actionTypes.WALL_BUILDING:\r\n            return {\r\n                ...state,\r\n                buildingWalls: action.build,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react'\r\nimport './AlgorithmButton.css'\r\n\r\nfunction AlgorithmButton({title, onClick, isChosen}) {\r\n    return (\r\n        <div \r\n            className={'algorithm header_button' + (isChosen ? ' chosen_algo' : '')} \r\n            onClick={onClick}\r\n        >\r\n            <h3>{title}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AlgorithmButton\r\n","import React, { useContext } from 'react';\r\nimport './Header.css'\r\nimport { useStateValue } from './StateProvider'\r\nimport { actionTypes } from './reducer'\r\nimport AlgorithmButton from './AlgorithmButton';\r\n\r\nfunction Header() {\r\n    const [{algorithm}, dispatch] = useStateValue();\r\n    \r\n    \r\n    const setAlgorithm = (algo) => {\r\n        dispatch({\r\n            type: actionTypes.SET_ALGO,\r\n            algorithm: algo,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className='header'>\r\n            <a className='title header_button' href='/'>Pathfinding Visualizer</a>\r\n            <div className='pick-algorithm'>\r\n                <AlgorithmButton\r\n                    title='Breath-First Search'\r\n                    isChosen={algorithm === 'bfs'}\r\n                    onClick={() => setAlgorithm('bfs')}\r\n                />\r\n                <AlgorithmButton\r\n                    title='Depth-First Search'\r\n                    isChosen={algorithm === 'dfs'}\r\n                    onClick={() => setAlgorithm('dfs')}\r\n                />\r\n                <AlgorithmButton\r\n                    title='Dijkstra Algorithm'\r\n                    isChosen={algorithm === 'dijkstra'}\r\n                    onClick={() => setAlgorithm('dijkstra')}\r\n                />\r\n                <AlgorithmButton\r\n                    title='A* Algorithm'\r\n                    isChosen={algorithm === 'a-star'}\r\n                    onClick={() => setAlgorithm('a-star')}\r\n                />\r\n            </div>\r\n            <div className='tools'>\r\n                <div className='clear_buttons'>\r\n                    <div \r\n                        className='header_button clear_button'\r\n                        onClick={() => document.getElementById('clear-board').click()}\r\n                    >Clear Board</div>\r\n                    <div \r\n                        className='header_button clear_button'\r\n                        onClick={() => document.getElementById('clear-path').click()}\r\n                    >Clear Path</div>\r\n                </div>\r\n                \r\n                <div\r\n                    id='run_algorithm' \r\n                    className='start_button' \r\n                    onClick={() => document.getElementById('start-algorithm').click()}\r\n                >Visualize</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport './Node.css'\r\n\r\nfunction Node({ row, col, isFinish, isStart, isWall, \r\n    onMouseDown, onMouseEnter, onMouseUp, isVisited, isPath, isNote, wallToggle }) {\r\n    const extraClassName = (isFinish ? 'node-finish'\r\n                        : isStart ? 'node-start'\r\n                        : isWall ? 'node-wall'\r\n                        : isVisited ? 'note-visited'\r\n                        : isPath ? 'note_path'\r\n                        : '').concat(isNote ? ' node-note' : '');\r\n    return (\r\n        <td \r\n            id={`node-${row}-${col}`} \r\n            className={`node ${extraClassName}`}\r\n            onContextMenu={e => {\r\n                e.preventDefault();\r\n                wallToggle(row, col);\r\n            }}\r\n            onClick={(e) => {\r\n                e.preventDefault();\r\n                onMouseDown(row, col);\r\n            }}\r\n            onMouseEnter={() => onMouseEnter(row, col)}\r\n            onMouseUp={onMouseUp}\r\n            onAnimationStart={e => e.stopPropagation()}\r\n            onMouseLeave={e => e.preventDefault()}\r\n            onDragStart={(e) => e.preventDefault()}\r\n        ></td>\r\n    )\r\n    \r\n}\r\n\r\nexport default Node\r\n","const dx = [-1, 0, 1, 0];\r\nconst dy = [0, 1, 0, -1];\r\n\r\nconst outRange = (grid, row, col) => {\r\n    return row < 0 || row === grid.length || \r\n            col < 0 || col === grid[0].length;\r\n}\r\n\r\n// BFS - Breath-First Search\r\nconst bfs = (grid, startX, startY) => {\r\n    const visitOrder = [], queue = [];\r\n    queue.push([startX, startY]); visitOrder.push(grid[startX][startY]);\r\n    grid[startX][startY].isVisited = true;\r\n    while(queue.length){\r\n        const a = queue.shift();\r\n        const x = a[0], y = a[1];\r\n\r\n        for(let i = 0; i < 4; i++){\r\n            const nextX = x + dx[i], nextY = y + dy[i];\r\n\r\n            if(outRange(grid, nextX, nextY)) continue;\r\n            if(grid[nextX][nextY].isWall) continue;            \r\n            if(grid[nextX][nextY].isVisited) continue;\r\n\r\n            grid[nextX][nextY].isVisited = true;\r\n            visitOrder.push(grid[nextX][nextY]);\r\n            grid[nextX][nextY].previousNode = grid[x][y];\r\n\r\n            if(grid[nextX][nextY].isFinish) return visitOrder;\r\n            queue.push([nextX, nextY]);\r\n        }\r\n    }\r\n    return visitOrder;\r\n}\r\n\r\n// DFS - Depth-First Search\r\nconst dfs = (grid, startX, startY) => {\r\n    const visitOrder = [], stack = [];\r\n    stack.push([startX, startY]);\r\n    while(stack.length){\r\n        const a = stack.pop();\r\n        const x = a[0], y = a[1];\r\n\r\n        if(grid[x][y].isVisited) continue;\r\n        grid[x][y].isVisited = true;\r\n        visitOrder.push(grid[x][y]);\r\n\r\n        if(grid[x][y].isFinish) return visitOrder;\r\n        for(let i = 3; i >= 0; i--){\r\n            const nextX = x + dx[i];\r\n            const nextY = y + dy[i];\r\n\r\n            if(outRange(grid, nextX, nextY)) continue;\r\n            if(grid[nextX][nextY].isVisited) continue;\r\n            if(grid[nextX][nextY].isWall) continue; \r\n\r\n            grid[nextX][nextY].previousNode = grid[x][y];\r\n            stack.push([nextX, nextY]);\r\n        }\r\n    }\r\n    return visitOrder;\r\n}\r\n\r\n// Dijkstra Algorithm\r\nconst dijkstra = (grid, startX, startY) => {\r\n    const visitOrder = [];\r\n    grid[startX][startY].distance = 0;\r\n    const unvisitedNodes = getAllNode(grid);\r\n    while(!!unvisitedNodes.length){\r\n        unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n        const node = unvisitedNodes.shift();\r\n        if(node.isWall) continue;\r\n        if(node.distance === Infinity) return visitOrder;\r\n        visitOrder.push(node);\r\n        if(node.isFinish) return visitOrder;\r\n        // update distance\r\n        for(let i = 0; i < 4; i++){\r\n            const x = node.row + dx[i];\r\n            const y = node.col + dy[i];\r\n            if(x < 0 || y < 0 || x === grid.length || y === grid[0].length) continue;\r\n            if(grid[x][y].isVisited) continue;\r\n            if(grid[x][y].distance > node.distance + 1){\r\n                grid[x][y].distance = node.distance + 1;\r\n                grid[x][y].previousNode = node;\r\n            }\r\n        }\r\n    }\r\n    return visitOrder;\r\n}\r\n\r\nconst getAllNode = (grid) => {\r\n    const nodes = [];\r\n    grid.forEach(row => row.forEach(node => nodes.push(node)));\r\n    return nodes;\r\n}\r\n\r\n// A* Algorithm\r\nconst Astar = (grid, startX, startY, finishX, finishY) => {\r\n    const visitOrder = [];\r\n    grid[startX][startY].distance = 0;\r\n    const target = grid[finishX][finishY];\r\n    const unvisitedNodes = getAllNode(grid);\r\n\r\n    const getHeuristics = (node) => {\r\n        return node.distance + manhattan(node, target);\r\n    }\r\n\r\n    while(!!unvisitedNodes.length){\r\n        unvisitedNodes.sort((a, b) => {\r\n            const ha = getHeuristics(a);\r\n            const hb = getHeuristics(b);\r\n            if(ha !== hb) return ha - hb;\r\n            return manhattan(a, target) - manhattan(b, target);\r\n        });\r\n        const node = unvisitedNodes.shift();\r\n\r\n        if(node.isWall) continue;\r\n        if(node.distance === Infinity) return visitOrder;\r\n        visitOrder.push(node);\r\n        if(node.isFinish) return visitOrder;\r\n\r\n        // update distance\r\n        for(let i = 0; i < 4; i++){\r\n            const x = node.row + dx[i];\r\n            const y = node.col + dy[i];\r\n            if(x < 0 || y < 0 || x === grid.length || y === grid[0].length) continue;\r\n            if(grid[x][y].isVisited) continue;\r\n            if(getHeuristics(grid[x][y]) > getHeuristics(node)){\r\n                grid[x][y].distance = node.distance + 1;\r\n                grid[x][y].previousNode = node;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst manhattan = (nodeA, nodeB) => {\r\n    return Math.abs(nodeA.row - nodeB.row) + Math.abs(nodeA.col - nodeB.col); \r\n}\r\n\r\n// get the path for by tracing previous node. (Does not guarantee shortest with DFS)\r\nconst getShortestPath = (grid, finishX, finishY) => {\r\n    const path = [];\r\n    let curNode = grid[finishX][finishY];\r\n    while(curNode !== null){\r\n        path.unshift(curNode);\r\n        curNode = curNode.previousNode;\r\n    }\r\n    return path;\r\n}\r\n\r\n\r\nexport {bfs, dfs, dijkstra, Astar, getShortestPath};","import React, { useState, useEffect } from 'react'\r\nimport './Board.css'\r\nimport Node from './Node'\r\nimport { bfs, dfs, dijkstra, Astar, getShortestPath } from './Algorithm/Pathfinder';\r\nimport { useStateValue } from './StateProvider'\r\nimport { actionTypes, algoList } from './reducer'\r\n\r\n\r\nconst ROWS = 20;\r\nconst COLUMNS = 32;\r\n\r\nfunction Board() {\r\n    const [START_ROW, setStartRow] = useState(10);\r\n    const [START_COL, setStartCol] = useState(6);\r\n    const [FINISH_ROW, setFinishRow] = useState(10);\r\n    const [FINISH_COL, setFinishCol] = useState(25);\r\n    const [{algorithm, speed, algoCost}, dispatch] = useStateValue();\r\n    const [grid, setGrid] = useState([]);\r\n    const [mouseDown, setMouseDown] = useState(false);\r\n    const [setStart, setSetStart] = useState(false);\r\n    const [setFinish, setSetFinish] = useState(false);\r\n    const [visualizing, setVisualizing] = useState(false);\r\n    const lastWall = {row: -1, col: -1};\r\n\r\n    const getInitGrid = () => {\r\n        const grid = [];\r\n        for (let row = 0; row < ROWS; row++) {\r\n            const currentRow = [];\r\n            for (let col = 0; col < COLUMNS; col++) {\r\n                currentRow.push(createNode(col, row));\r\n            }\r\n            grid.push(currentRow);\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    const createNode = (col, row) => {\r\n        return {\r\n            col,\r\n            row,\r\n            isStart: row === START_ROW && col === START_COL,\r\n            isFinish: row === FINISH_ROW && col === FINISH_COL,\r\n            distance: Infinity,\r\n            isVisited: false,\r\n            isWall: false,\r\n            previousNode: null,\r\n        };\r\n    };\r\n\r\n    const handleMouseDown = (row, col) => {\r\n        if(grid[row][col].isStart){\r\n            setSetStart(true);\r\n        } else if(grid[row][col].isFinish){\r\n            setSetFinish(true);\r\n        } else{\r\n            if(mouseDown){\r\n                console.log('not wall');\r\n                dispatch({\r\n                    type: actionTypes.WALL_BUILDING,\r\n                    build: false,\r\n                });\r\n                setMouseDown(false);\r\n            } else{\r\n                dispatch({\r\n                    type: actionTypes.WALL_BUILDING,\r\n                    build: true,\r\n                });\r\n                wallToggle(row, col);\r\n                setMouseDown(true);\r\n            }\r\n        }\r\n    }\r\n    \r\n    const handleMouseEnter = (row, col) => {\r\n        if(setStart){\r\n            if(grid[row][col].isFinish) return;\r\n            document.getElementById(`node-${START_ROW}-${START_COL}`)\r\n                    .className = 'node '\r\n                    .concat(grid[START_ROW][START_COL].isWall ? 'node-wall' : '');\r\n            document.getElementById(`node-${row}-${col}`)\r\n                    .className += ' node-start';\r\n            grid[START_ROW][START_COL].isStart = false;\r\n            grid[row][col].isStart = true;\r\n            setStartRow(row);\r\n            setStartCol(col);\r\n        } else if(setFinish){\r\n            if(grid[row][col].isStart) return;\r\n            document.getElementById(`node-${FINISH_ROW}-${FINISH_COL}`)\r\n                    .className = 'node '\r\n                    .concat(grid[FINISH_ROW][FINISH_COL].isWall ? 'node-wall' : '');\r\n            document.getElementById(`node-${row}-${col}`)\r\n                    .className = 'node node-finish';\r\n            grid[FINISH_ROW][FINISH_COL].isFinish = false;\r\n            grid[row][col].isFinish = true;\r\n            setFinishRow(row);\r\n            setFinishCol(col);\r\n        } else{\r\n            if (!mouseDown) return;\r\n            wallToggle(row, col);\r\n        }\r\n    }\r\n    \r\n    const handleMouseUp = () => {\r\n        // setMouseDown(false);\r\n        setSetStart(false);\r\n        setSetFinish(false);\r\n    }\r\n\r\n    const wallToggle = (row, col) => {\r\n        const node = grid[row][col];\r\n        if(node.isFinish || node.isStart) return grid;\r\n        if(row === lastWall.row && col === lastWall.col) return;\r\n        lastWall.row = row;\r\n        lastWall.col = col;\r\n        node.isWall = !node.isWall;\r\n        const nodeLink = document.getElementById(`node-${row}-${col}`)\r\n        if(nodeLink.className.includes('node-wall')) nodeLink.className = 'node';\r\n        else nodeLink.className = 'node node-wall';\r\n    };\r\n    \r\n    useEffect(() => {\r\n        setGrid(getInitGrid());\r\n    }, []);\r\n\r\n    // nodeType: 0(visited) or 1(path)\r\n    const countIncr = (isVisited, cost) => {\r\n        const idx = algoList.indexOf(algorithm);\r\n        dispatch({\r\n            type: isVisited ? actionTypes.SET_VISIT_COST : actionTypes.SET_PATH_COST,\r\n            idx: idx,\r\n            cost: cost,\r\n        })\r\n    }\r\n\r\n    const animate = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            if (i === visitedNodesInOrder.length) {\r\n                setTimeout(() => {\r\n                    animateShortestPath(nodesInShortestPathOrder);\r\n                    countIncr(true, i);\r\n                }, speed * i);\r\n                return;\r\n            }\r\n            const node = visitedNodesInOrder[i];\r\n            setTimeout(() => {\r\n                document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                    'node node-visiting'\r\n                    .concat(grid[node.row][node.col].isStart ? ' node-start'\r\n                            : grid[node.row][node.col].isFinish ? ' node-finish'\r\n                            : '');\r\n            }, speed * (i - 0.8));\r\n            setTimeout(() => {\r\n                document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                    'node node-visited'\r\n                    .concat(grid[node.row][node.col].isStart ? ' node-start'\r\n                            : grid[node.row][node.col].isFinish ? ' node-finish'\r\n                            : '');\r\n            }, speed * i);\r\n        }\r\n    }\r\n\r\n    const animateShortestPath = (nodesInShortestPathOrder) => {\r\n        for (let i = 0; i <= nodesInShortestPathOrder.length; i++) {\r\n            if(i == nodesInShortestPathOrder.length){\r\n                setTimeout(() => {\r\n                    countIncr(false, i);\r\n                    setVisualizing(false);\r\n                    runButtonToggle('start_button');\r\n                }, 4 * speed * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = nodesInShortestPathOrder[i];\r\n                document.getElementById(`node-${node.row}-${node.col}`).className = \r\n                    'node node-shortest-path'\r\n                    .concat(grid[node.row][node.col].isStart ? ' node-start'\r\n                            : grid[node.row][node.col].isFinish ? ' node-finish'\r\n                            : '');\r\n            }, 4 * speed * i);\r\n        }\r\n    }\r\n\r\n    const runButtonToggle = (className) => {\r\n        document.getElementById('run_algorithm').className = className;\r\n    }\r\n\r\n    const findPath = () => {\r\n        if(visualizing) return;\r\n        setVisualizing(true);\r\n        runButtonToggle('blocked_button');\r\n        clearBoard(false);\r\n        const visitedNodesInOrder = algorithm === 'bfs' ? bfs(grid, START_ROW, START_COL)\r\n                                    : algorithm === 'dfs' ? dfs(grid, START_ROW, START_COL)\r\n                                    : algorithm === 'dijkstra' ? dijkstra(grid, START_ROW, START_COL)\r\n                                    : Astar(grid, START_ROW, START_COL, FINISH_ROW, FINISH_COL);\r\n        // visitedNodesInOrder.shift();\r\n        const nodesInShortestPathOrder = getShortestPath(grid, FINISH_ROW, FINISH_COL);\r\n        animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n\r\n    const clearBoard = (delWall) => {\r\n        if(visualizing) return;\r\n        let nodes = document.getElementsByClassName('node');\r\n        for(let i = 0; i < nodes.length; i++){\r\n            if(nodes[i].className.includes('node-note')) continue;\r\n            nodes[i].className = 'node '\r\n                                .concat(!delWall && \r\n                                    nodes[i].className.includes('node-wall') \r\n                                    ? 'node-wall' : '');\r\n        }\r\n        const newGrid = grid.map(row => row.map(node => {\r\n            return {\r\n                ...node,\r\n                isWall: delWall ? false : node.isWall,\r\n                previousNode: null,\r\n                isVisited: false,\r\n                distance: Infinity,\r\n            }\r\n        }));\r\n        setGrid(newGrid);\r\n        document.getElementById(`node-${START_ROW}-${START_COL}`).className = 'node node-start';\r\n        document.getElementById(`node-${FINISH_ROW}-${FINISH_COL}`).className = 'node node-finish';\r\n        \r\n        if(delWall){\r\n            dispatch({\r\n                type: actionTypes.RESET_COST,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        <table className='board'>\r\n            <tbody>\r\n            {grid.length ? grid.map((row, rowIdx) => {\r\n                return (\r\n                    <tr className='row' key={rowIdx}>\r\n                        {row.map((node, nodeIdx) => {\r\n                            // console.log(\"rewrite\");\r\n                            const {row, col, isWall, isStart, isFinish} = node;\r\n                            return (\r\n                                <Node \r\n                                    key={nodeIdx}\r\n                                    row={row}\r\n                                    col={col}\r\n                                    isFinish={isFinish}\r\n                                    isStart={isStart}\r\n                                    isWall={isWall}\r\n                                    wallToggle={wallToggle}\r\n                                    onMouseDown={(row, col) => handleMouseDown(row, col)}\r\n                                    onMouseEnter={(row, col) => handleMouseEnter(row, col)}\r\n                                    onMouseUp={() => handleMouseUp()}\r\n                                ></Node>\r\n                            )\r\n                        })}\r\n                    </tr>\r\n                )\r\n            }) : <div>Nothing here</div>}\r\n            </tbody>\r\n        </table>\r\n        <button id='start-algorithm' className='hidden' onClick={findPath}>button</button>\r\n        <button id='clear-board' className='hidden' onClick={() => clearBoard(true)}>clear</button>\r\n        <button id='clear-path' className='hidden' onClick={() => clearBoard(false)}>clear</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board;\r\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './Header';\nimport Board from './Board';\nimport Node from './Node'\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { useStateValue } from './StateProvider'\nimport { actionTypes, speed, algoList} from './reducer'\nimport CountUp from 'react-countup';\n\nfunction App() {\n\tconst [speedText, setSpeedText] = useState('Fast');\n\tconst [{algoCost, buildingWalls}, dispatch] = useStateValue();\n\tconst changeSpeed = (event) => {\n\t\tsetSpeedText(event.target.value);\n\t\tlet newSpeed = 0;\n\t\tswitch(event.target.value){\n\t\t\tcase 'Low':\n\t\t\t\tnewSpeed = speed[0];\n\t\t\t\tbreak;\n\t\t\tcase 'Average':\n\t\t\t\tnewSpeed = speed[1];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tnewSpeed = speed[2];\n\t\t}\n\t\tdispatch({\n\t\t\ttype: actionTypes.SET_SPEED,\n\t\t\tspeed: newSpeed,\n\t\t})\n\t}\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Header></Header>\n\t\t\t<div className='title_text'><h1>Choose an Algorithm and Visualize</h1></div>\n\t\t\t<div className='visualizer'>\n\t\t\t\t<div className='options'>\n\t\t\t\t\t<div className='opt'>\n\t\t\t\t\t\t<h3>Speed</h3>\n\t\t\t\t\t\t<FormControl className='speed'>\n\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\tlabelId=\"demo-simple-select-label\"\n\t\t\t\t\t\t\t\tid=\"demo-simple-select\"\n\t\t\t\t\t\t\t\tvalue={speedText}\n\t\t\t\t\t\t\t\tonChange={changeSpeed}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<MenuItem value='Low'>Slow</MenuItem>\n\t\t\t\t\t\t\t\t<MenuItem value='Average'>Average</MenuItem>\n\t\t\t\t\t\t\t\t<MenuItem value='Fast'>Fast</MenuItem>\n\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t</div>\n\t\t\t\t\t<h2>Statistics:</h2>\n\t\t\t\t\t<div className='statistics'>\n\t\t\t\t\t\t<div className='stat'>\n\t\t\t\t\t\t\t<div className='algo_title'><h3>BFS:</h3></div>\n\t\t\t\t\t\t\t<div className='number'>\n\t\t\t\t\t\t\t\t<span className='visited-number'>\n\t\t\t\t\t\t\t\t\tVisited: {algoCost[0][0] === 'TBD' ? 'TBD' \n\t\t\t\t\t\t\t\t\t\t\t: <CountUp \n\t\t\t\t\t\t\t\t\t\t\t\tend={algoCost[0][0]} \n\t\t\t\t\t\t\t\t\t\t\t\tduration={4}\n\t\t\t\t\t\t\t\t\t\t\t\tuseEasing={false}\n\t\t\t\t\t\t\t\t\t\t\t></CountUp>}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<span className='path-number'>\n\t\t\t\t\t\t\t\t\tPath: {algoCost[0][1] === 'TBD' ? 'TBD' \n\t\t\t\t\t\t\t\t\t\t\t: <CountUp \n\t\t\t\t\t\t\t\t\t\t\t\tend={algoCost[0][1]} \n\t\t\t\t\t\t\t\t\t\t\t\tduration={5}\n\t\t\t\t\t\t\t\t\t\t\t></CountUp>}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='stat'>\n\t\t\t\t\t\t\t<div className='algo_title'><h3>DFS:</h3></div>\n\t\t\t\t\t\t\t<div className='number'>\n\t\t\t\t\t\t\t\t<span className='visited-number'>\n\t\t\t\t\t\t\t\t\tVisited: {algoCost[1][0] === 'TBD' ? 'TBD' \n\t\t\t\t\t\t\t\t\t\t\t: <CountUp \n\t\t\t\t\t\t\t\t\t\t\t\tend={algoCost[1][0]} \n\t\t\t\t\t\t\t\t\t\t\t\tduration={4}\n\t\t\t\t\t\t\t\t\t\t\t\tuseEasing={false}\n\t\t\t\t\t\t\t\t\t\t\t></CountUp>}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<span className='path-number'>\n\t\t\t\t\t\t\t\t\tPath: {algoCost[1][1] === 'TBD' ? 'TBD' \n\t\t\t\t\t\t\t\t\t\t\t: <CountUp \n\t\t\t\t\t\t\t\t\t\t\t\tend={algoCost[1][1]} \n\t\t\t\t\t\t\t\t\t\t\t\tduration={5}\n\t\t\t\t\t\t\t\t\t\t\t></CountUp>}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='stat'>\n\t\t\t\t\t\t\t<div className='algo_title'><h3>Dijkstra:</h3></div>\n\t\t\t\t\t\t\t<div className='number'>\n\t\t\t\t\t\t\t\t<span className='visited-number'>\n\t\t\t\t\t\t\t\t\tVisited: {algoCost[2][0] === 'TBD' ? 'TBD' \n\t\t\t\t\t\t\t\t\t\t\t: <CountUp \n\t\t\t\t\t\t\t\t\t\t\t\tend={algoCost[2][0]} \n\t\t\t\t\t\t\t\t\t\t\t\tduration={4}\n\t\t\t\t\t\t\t\t\t\t\t\tuseEasing={false}\n\t\t\t\t\t\t\t\t\t\t\t></CountUp>}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<span className='path-number'>\n\t\t\t\t\t\t\t\t\tPath: {algoCost[2][1] === 'TBD' ? 'TBD' \n\t\t\t\t\t\t\t\t\t\t\t: <CountUp \n\t\t\t\t\t\t\t\t\t\t\t\tend={algoCost[2][1]} \n\t\t\t\t\t\t\t\t\t\t\t\tduration={5}\n\t\t\t\t\t\t\t\t\t\t\t></CountUp>}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='stat'>\n\t\t\t\t\t\t\t<div className='algo_title'><h3>A-star:</h3></div>\n\t\t\t\t\t\t\t<div className='number'>\n\t\t\t\t\t\t\t\t<span className='visited-number'>\n\t\t\t\t\t\t\t\t\tVisited: {algoCost[3][0] === 'TBD' ? 'TBD' \n\t\t\t\t\t\t\t\t\t\t\t: <CountUp \n\t\t\t\t\t\t\t\t\t\t\t\tend={algoCost[3][0]} \n\t\t\t\t\t\t\t\t\t\t\t\tduration={4}\n\t\t\t\t\t\t\t\t\t\t\t\tuseEasing={false}\n\t\t\t\t\t\t\t\t\t\t\t></CountUp>}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<span className='path-number'>\n\t\t\t\t\t\t\t\t\tPath: {algoCost[3][1] === 'TBD' ? 'TBD' \n\t\t\t\t\t\t\t\t\t\t\t: <CountUp \n\t\t\t\t\t\t\t\t\t\t\t\tend={algoCost[3][1]} \n\t\t\t\t\t\t\t\t\t\t\t\tduration={5}\n\t\t\t\t\t\t\t\t\t\t\t></CountUp>}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<Board></Board>\n\t\t\t\t<div className='note'>\n\t\t\t\t\t<div className='note_opt'>\n\t\t\t\t\t\t<Node \n\t\t\t\t\t\t\tkey='unvisited-note'\n\t\t\t\t\t\t\tisNote={true}\n\t\t\t\t\t\t\tonMouseDown={() => {}}\n\t\t\t\t\t\t\tonMouseEnter={() => {}}\n\t\t\t\t\t\t\tonMouseUp={() => {}}\n\t\t\t\t\t\t></Node>\n\t\t\t\t\t\t<h3>Unvisited Node</h3>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='note_opt'>\n\t\t\t\t\t\t<Node \n\t\t\t\t\t\t\tkey='visited-note'\n\t\t\t\t\t\t\tisNote={true}\n\t\t\t\t\t\t\tisVisited={true}\n\t\t\t\t\t\t\tonMouseDown={() => {}}\n\t\t\t\t\t\t\tonMouseEnter={() => {}}\n\t\t\t\t\t\t\tonMouseUp={() => {}}\n\t\t\t\t\t\t></Node>\n\t\t\t\t\t\t<h3>Visited Node</h3>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='note_opt'>\n\t\t\t\t\t\t<Node \n\t\t\t\t\t\t\tkey='wall-note'\n\t\t\t\t\t\t\tisNote={true}\n\t\t\t\t\t\t\tisWall={true}\n\t\t\t\t\t\t\tonMouseDown={() => {}}\n\t\t\t\t\t\t\tonMouseEnter={() => {}}\n\t\t\t\t\t\t\tonMouseUp={() => {}}\n\t\t\t\t\t\t></Node>\n\t\t\t\t\t\t<h3>Wall</h3>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='note_opt'>\n\t\t\t\t\t\t<Node \n\t\t\t\t\t\t\tkey='path-note'\n\t\t\t\t\t\t\tisNote={true}\n\t\t\t\t\t\t\tisPath={true}\n\t\t\t\t\t\t\tonMouseDown={() => {}}\n\t\t\t\t\t\t\tonMouseEnter={() => {}}\n\t\t\t\t\t\t\tonMouseUp={() => {}}\n\t\t\t\t\t\t></Node>\n\t\t\t\t\t\t<h3>Path</h3>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='wall_building'>\n\t\t\t\t\t\t{!buildingWalls ? <h3 id='go_build_walls'>Click to build tons of walls</h3>\n\t\t\t\t\t\t\t\t\t\t: <h3 id='stop_build_walls'>Re-click to stop building</h3>}\n\t\t\t\t\t\t<h3 id='build_single_wall'>Right click to switch a single square</h3>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StateProvider } from './StateProvider';\nimport reducer, { initialState } from './reducer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}